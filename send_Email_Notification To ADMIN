package com.yash.ytms.util;

import java.io.File;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ClassPathResource;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import org.thymeleaf.context.Context;
import org.thymeleaf.spring6.SpringTemplateEngine;

import com.yash.ytms.constants.UserAccountStatusTypes;
import com.yash.ytms.domain.TrainerAttedance;
import com.yash.ytms.domain.TrainingRequestForm;
import com.yash.ytms.domain.YtmsUser;
import com.yash.ytms.repository.YtmsUserRepository;

import ch.qos.logback.classic.Logger;
import jakarta.activation.DataHandler;
import jakarta.activation.DataSource;
import jakarta.activation.FileDataSource;
import jakarta.mail.Authenticator;
import jakarta.mail.BodyPart;
import jakarta.mail.Message;
import jakarta.mail.MessagingException;
import jakarta.mail.Multipart;
import jakarta.mail.PasswordAuthentication;
import jakarta.mail.Session;
import jakarta.mail.Transport;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeBodyPart;
import jakarta.mail.internet.MimeMessage;
import jakarta.mail.internet.MimeMultipart;

/**
 * Project Name - ytms-api
 * <p>
 * IDE Used - IntelliJ IDEA
 *
 * @author - yash.raj
 * @since - 25-01-2024
 */
@Component
public class EmailUtil {

    @Autowired
    private JavaMailSender javaMailSender;
    
    @Autowired
    private SpringTemplateEngine templateEngine;
    
    @Autowired
    YtmsUserRepository userRepository;

    @Value("${spring.mail.username}")
    private String mailUsername;
    @Value("${spring.mail.password}")
    private String mailPassword;

    @Value("${attachFile.filePath}")
    private String filePath;

    @Value("${attachFile.fileExt}")
    private String fileExt;

    public void sendSetPasswordEmail(YtmsUser ytmsUser) throws MessagingException {
    	String resetLink = "http://10.26.2.42:8080/ytmscli/reset-password?session=" + Base64.getEncoder().encodeToString(ytmsUser.getEmailAdd().getBytes());
        MimeMessage mimeMessage = javaMailSender.createMimeMessage();
        Context context=new Context();
        context.setVariable("username", ytmsUser.getFullName());
        context.setVariable("resetLink", resetLink);
        context.setVariable("logo", new ClassPathResource("static/YTMS_LOGO.png"));
        String process=templateEngine.process("forgot-password.html", context);
        MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage);
        mimeMessageHelper.setTo(ytmsUser.getEmailAdd());
        mimeMessageHelper.setSubject("SetPassword");
        
        mimeMessageHelper.setText(process,true);
        
//        mimeMessageHelper.setText("""
//                	        
//                 <a href="http://10.26.2.42:8080/ytmscli/reset-password?session=%s">click here to reset password</a>
//                	        
//                """.formatted(Base64.getEncoder().encodeToString(email.getBytes())), true);

        javaMailSender.send(mimeMessage);
    }

    public void sendNotificationMailForTechnicalManage(List<String> usersList,String email) throws MessagingException {
        MimeMessage mimeMessage = javaMailSender.createMimeMessage();
        MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage);
        String[] to =  createStringArray(usersList);
        YtmsUser user=userRepository.getById(email);
        mimeMessageHelper.setTo(to);

        mimeMessageHelper.setSubject("New Training Request Notification");
        mimeMessageHelper.setText(user.getFullName()+" has been submitted a request, if you want to Approved/Reject, " + "Please go to dashboard and take action ");


        javaMailSender.send(mimeMessage);
    }

    private String[] createStringArray(List<String> usersList) {
        String[] emailIds = new String[usersList.size()];

        for (int i = 0; i < usersList.size(); i++) {
            emailIds[i] = usersList.get(i);
        }
        return  emailIds;
    }

    public void sendNotificationMailForRequestApproved(String email, String fileName, TrainingRequestForm formDto) throws MessagingException {
        Session session = javaMailSender.createMimeMessage().getSession();
        session = Session.getInstance(session.getProperties(), new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(mailUsername, mailPassword);
            }
        });
        try {
            Message message = new MimeMessage(session);
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));
            message.setSubject("Notification for Training Approval");
//            message.setContent(email + " your request has been Approved.<br><br>"+approveMailBody(formDto),"text/html");

            // Create the email body
            YtmsUser user=userRepository.getById(email);
            BodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart.setContent("Hi "+user.getFullName() + "<br> your request has been Approved.<br> Please find below training details and attachment for the training plan"+approveMailBody(formDto)+"<br><br> Thanks & Regards<br> YTMS Team","text/html; charset=utf-8");
            // Attach the file
            File f = new File(filePath+fileName+fileExt);

            // Checking if the specified file exists or not
            if (f.exists()) {
                BodyPart attachmentBodyPart = new MimeBodyPart();
                DataSource source = new FileDataSource(filePath + fileName + fileExt);
                attachmentBodyPart.setDataHandler(new DataHandler(source));
                // attachmentBodyPart.setFileName("Demo.xlsx");
                attachmentBodyPart.setFileName(fileName + fileExt);
                // Create a multipart message
                Multipart multipart = new MimeMultipart();
                multipart.addBodyPart(messageBodyPart);
                multipart.addBodyPart(attachmentBodyPart);
                // Set the content of the message
                message.setContent(multipart);
            }
            // Send the email
            Transport.send(message);

        } catch (Exception ex) {
            System.out.println("Error   " + ex.getMessage());
        }
    }
    
    public String approveMailBody(TrainingRequestForm formDto) {
    	StringBuilder tableBuilder = new StringBuilder();
    	tableBuilder.append("<table border='1'>");
    	tableBuilder.append("<tr>");
    	 
    	// Add table headers
	    	tableBuilder.append("<th>").append("Training Name").append("</th>");
	    	tableBuilder.append("<td>").append(formDto.getTrainingName()).append("</td>");
    	tableBuilder.append("</tr>");
    	tableBuilder.append("<tr>");
	    	tableBuilder.append("<th>").append("Start Date").append("</th>");
	    	tableBuilder.append("<td>").append(formDto.getActualStartDate()).append("</td>");
    	tableBuilder.append("</tr>");
    	tableBuilder.append("<tr>");
	    	tableBuilder.append("<th>").append("End Date").append("</th>");
	    	tableBuilder.append("<td>").append(formDto.getActualEndDate().toString()).append("</td>");
    	tableBuilder.append("<tr>");
    	tableBuilder.append("</tr>");
	    	tableBuilder.append("<th>").append("Trainer Name").append("</th>");
	    	tableBuilder.append("<td>").append(formDto.getTrainer()).append("</td>");
    	 
    	tableBuilder.append("</tr>");
    	 
    	// Add table rows with data
    	
//    	  tableBuilder.append("<tr>");
//    	    tableBuilder.append("<td>").append(formDto.getTrainingName()).append("</td>");
//    	    tableBuilder.append("<td>").append(formDto.getActualStartDate()).append("</td>");
//    	    tableBuilder.append("<td>").append(formDto.getActualEndDate()).append("</td>");
//    	    tableBuilder.append("<td>").append(formDto.getTrainer()).append("</td>");
//    	  tableBuilder.append("</tr>");
    	
    	 
    	tableBuilder.append("</table>");
    	return tableBuilder.toString();
	}

    public void sendNotificationMailForRequestReject(String email,TrainingRequestForm formDto) throws MessagingException {
        MimeMessage mimeMessage = javaMailSender.createMimeMessage();
        MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage);
        mimeMessageHelper.setTo(email);

        mimeMessageHelper.setSubject("Notification for Training Rejection");
        mimeMessageHelper.setText(email + " request has been Rejected due to below reason.\n"+formDto.getDeclinedMessage());


        javaMailSender.send(mimeMessage);
    }

    public void sendMailToTechnicalManager(List<String> usersList) throws MessagingException {
        MimeMessage mimeMessage = javaMailSender.createMimeMessage();
        MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage);
        String[] to =  createStringArray(usersList);
        mimeMessageHelper.setTo(to);
        mimeMessageHelper.setSubject("New User Request Notification");
        List<YtmsUser> pendingUsers = userRepository.getAllPendingUsers();
        
        String emailText = "The following users have submitted a request:\n\n" +
                pendingUsers.stream()
                            .map(YtmsUser::getFullName)
                            .collect(Collectors.joining("\n")) +
                "\n\nIf you want to Approve/Reject, please go to the dashboard and take action.";
        
        mimeMessageHelper.setText(emailText.toString());
             
        System.out.println("==============="+emailText+"================");
        
        javaMailSender.send(mimeMessage);
    }


    public void sendMailToTrainingStatus(List<String> managerList,TrainingRequestForm trainingRequestForm) throws MessagingException {
        MimeMessage mimeMessage = javaMailSender.createMimeMessage();
        MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage);
        String[] to =  createStringArray(managerList);
        mimeMessageHelper.setTo(to);
        mimeMessageHelper.setSubject("Notification for Training status update");
        mimeMessageHelper.setText("This "+trainingRequestForm.getTrainingName()+ " training status has been updated "
                +trainingRequestForm.getTrainingStatus() + " by " +trainingRequestForm.getTrainer());


        javaMailSender.send(mimeMessage);
    }
    
    
	public void sendMailToTechnicalManagers(List<String> usersList, String subject, String emailText)
			throws MessagingException {
		MimeMessage mimeMessage = javaMailSender.createMimeMessage();
		MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage);
		String[] to = createStringArray(usersList);
		mimeMessageHelper.setTo(to);
		mimeMessageHelper.setSubject(subject);

		mimeMessageHelper.setText(emailText);

		System.out.println("===============" + emailText + "================");

		javaMailSender.send(mimeMessage);
	}
	
	public void constructAndSendMailToTechnicalManagers(List<TrainerAttedance> listTrainerAttendance) {
		List<String> usersList = userRepository.findAllTechnicalManager();
		String subject = "New Leave Request Notification";
		String emailText = "The following trainers have submitted a leave request:\n\n"
				+ listTrainerAttendance.stream().map(TrainerAttedance::getTranier_name).distinct()
						.collect(Collectors.joining("\n"))
				+ "\n\nIf you want to Approve/Reject, please go to the dashboard and take action.";

		try {
			this.sendMailToTechnicalManagers(usersList, subject, emailText);
		} catch (MessagingException e) {
			System.out.println(e);
		}
	}

	@Async
	public void constructAndSendMailToTrainersAndRequestors(String tranier_name, String status, List<String> names) {

		List<String> usersList = new ArrayList<>();
		usersList.add(tranier_name);
		if (names.size() > 0)
			usersList.add(names.get(0));

		String subject = "Leave Request Approve Notification";
		String emailText = "Dear " + tranier_name + " Your Leaves Request is Approved.";

		if (UserAccountStatusTypes.DECLINED.name().equals(status)) {
			subject = "Leave Request Reject Notification";
			emailText = "Dear " + tranier_name + " Your Leaves Request is Rejected.";
		}

		try {
			System.out.println("usersList" + usersList);
			System.out.println(subject);
			this.sendMailToTechnicalManagers(usersList, subject, emailText);
		} catch (MessagingException e) {
			System.out.println(e);
		}

	}

}
